{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data analysis and wrangling\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import random as rnd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# visualization\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# scaling and train test split\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# creating a model\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Activation\n",
    "from tensorflow.keras.optimizers import Adam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# evaluation on test data\n",
    "from sklearn.metrics import mean_squared_error,mean_absolute_error,explained_variance_score\n",
    "from sklearn.metrics import classification_report,confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Location</th>\n",
       "      <th>Year</th>\n",
       "      <th>Kilometers_Driven</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner_Type</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Engine</th>\n",
       "      <th>Power</th>\n",
       "      <th>Seats</th>\n",
       "      <th>New_Price</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Maruti Wagon R LXI CNG</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>2010</td>\n",
       "      <td>72000</td>\n",
       "      <td>CNG</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>26.6 km/kg</td>\n",
       "      <td>998 CC</td>\n",
       "      <td>58.16 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hyundai Creta 1.6 CRDi SX Option</td>\n",
       "      <td>Pune</td>\n",
       "      <td>2015</td>\n",
       "      <td>41000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>19.67 kmpl</td>\n",
       "      <td>1582 CC</td>\n",
       "      <td>126.2 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Honda Jazz V</td>\n",
       "      <td>Chennai</td>\n",
       "      <td>2011</td>\n",
       "      <td>46000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>18.2 kmpl</td>\n",
       "      <td>1199 CC</td>\n",
       "      <td>88.7 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8.61 Lakh</td>\n",
       "      <td>4.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Maruti Ertiga VDI</td>\n",
       "      <td>Chennai</td>\n",
       "      <td>2012</td>\n",
       "      <td>87000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>20.77 kmpl</td>\n",
       "      <td>1248 CC</td>\n",
       "      <td>88.76 bhp</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Audi A4 New 2.0 TDI Multitronic</td>\n",
       "      <td>Coimbatore</td>\n",
       "      <td>2013</td>\n",
       "      <td>40670</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Second</td>\n",
       "      <td>15.2 kmpl</td>\n",
       "      <td>1968 CC</td>\n",
       "      <td>140.8 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6014</th>\n",
       "      <td>Maruti Swift VDI</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>2014</td>\n",
       "      <td>27365</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>28.4 kmpl</td>\n",
       "      <td>1248 CC</td>\n",
       "      <td>74 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7.88 Lakh</td>\n",
       "      <td>4.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6015</th>\n",
       "      <td>Hyundai Xcent 1.1 CRDi S</td>\n",
       "      <td>Jaipur</td>\n",
       "      <td>2015</td>\n",
       "      <td>100000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>24.4 kmpl</td>\n",
       "      <td>1120 CC</td>\n",
       "      <td>71 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6016</th>\n",
       "      <td>Mahindra Xylo D4 BSIV</td>\n",
       "      <td>Jaipur</td>\n",
       "      <td>2012</td>\n",
       "      <td>55000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Second</td>\n",
       "      <td>14.0 kmpl</td>\n",
       "      <td>2498 CC</td>\n",
       "      <td>112 bhp</td>\n",
       "      <td>8.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6017</th>\n",
       "      <td>Maruti Wagon R VXI</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>2013</td>\n",
       "      <td>46000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>18.9 kmpl</td>\n",
       "      <td>998 CC</td>\n",
       "      <td>67.1 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6018</th>\n",
       "      <td>Chevrolet Beat Diesel</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>2011</td>\n",
       "      <td>47000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>25.44 kmpl</td>\n",
       "      <td>936 CC</td>\n",
       "      <td>57.6 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6019 rows Ã— 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  Name    Location  Year  Kilometers_Driven  \\\n",
       "0               Maruti Wagon R LXI CNG      Mumbai  2010              72000   \n",
       "1     Hyundai Creta 1.6 CRDi SX Option        Pune  2015              41000   \n",
       "2                         Honda Jazz V     Chennai  2011              46000   \n",
       "3                    Maruti Ertiga VDI     Chennai  2012              87000   \n",
       "4      Audi A4 New 2.0 TDI Multitronic  Coimbatore  2013              40670   \n",
       "...                                ...         ...   ...                ...   \n",
       "6014                  Maruti Swift VDI       Delhi  2014              27365   \n",
       "6015          Hyundai Xcent 1.1 CRDi S      Jaipur  2015             100000   \n",
       "6016             Mahindra Xylo D4 BSIV      Jaipur  2012              55000   \n",
       "6017                Maruti Wagon R VXI     Kolkata  2013              46000   \n",
       "6018             Chevrolet Beat Diesel   Hyderabad  2011              47000   \n",
       "\n",
       "     Fuel_Type Transmission Owner_Type     Mileage   Engine      Power  Seats  \\\n",
       "0          CNG       Manual      First  26.6 km/kg   998 CC  58.16 bhp    5.0   \n",
       "1       Diesel       Manual      First  19.67 kmpl  1582 CC  126.2 bhp    5.0   \n",
       "2       Petrol       Manual      First   18.2 kmpl  1199 CC   88.7 bhp    5.0   \n",
       "3       Diesel       Manual      First  20.77 kmpl  1248 CC  88.76 bhp    7.0   \n",
       "4       Diesel    Automatic     Second   15.2 kmpl  1968 CC  140.8 bhp    5.0   \n",
       "...        ...          ...        ...         ...      ...        ...    ...   \n",
       "6014    Diesel       Manual      First   28.4 kmpl  1248 CC     74 bhp    5.0   \n",
       "6015    Diesel       Manual      First   24.4 kmpl  1120 CC     71 bhp    5.0   \n",
       "6016    Diesel       Manual     Second   14.0 kmpl  2498 CC    112 bhp    8.0   \n",
       "6017    Petrol       Manual      First   18.9 kmpl   998 CC   67.1 bhp    5.0   \n",
       "6018    Diesel       Manual      First  25.44 kmpl   936 CC   57.6 bhp    5.0   \n",
       "\n",
       "      New_Price  Price  \n",
       "0           NaN   1.75  \n",
       "1           NaN  12.50  \n",
       "2     8.61 Lakh   4.50  \n",
       "3           NaN   6.00  \n",
       "4           NaN  17.74  \n",
       "...         ...    ...  \n",
       "6014  7.88 Lakh   4.75  \n",
       "6015        NaN   4.00  \n",
       "6016        NaN   2.90  \n",
       "6017        NaN   2.65  \n",
       "6018        NaN   2.50  \n",
       "\n",
       "[6019 rows x 13 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# reading data from csv file using pandas\n",
    "# reading data which will be used for training\n",
    "df = pd.read_csv(\"C:\\\\Users\\\\saket\\\\Downloads\\\\project_data\\\\train-data.csv\",skiprows=0)\n",
    "df = df.drop(\"sno\",axis=1)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Location</th>\n",
       "      <th>Year</th>\n",
       "      <th>Kilometers_Driven</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner_Type</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Engine</th>\n",
       "      <th>Power</th>\n",
       "      <th>Seats</th>\n",
       "      <th>New_Price</th>\n",
       "      <th>Price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Maruti Wagon R LXI CNG</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>2010</td>\n",
       "      <td>72000</td>\n",
       "      <td>CNG</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>26.6 km/kg</td>\n",
       "      <td>998 CC</td>\n",
       "      <td>58.16 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hyundai Creta 1.6 CRDi SX Option</td>\n",
       "      <td>Pune</td>\n",
       "      <td>2015</td>\n",
       "      <td>41000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>19.67 kmpl</td>\n",
       "      <td>1582 CC</td>\n",
       "      <td>126.2 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Honda Jazz V</td>\n",
       "      <td>Chennai</td>\n",
       "      <td>2011</td>\n",
       "      <td>46000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>18.2 kmpl</td>\n",
       "      <td>1199 CC</td>\n",
       "      <td>88.7 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>8.61 Lakh</td>\n",
       "      <td>4.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Maruti Ertiga VDI</td>\n",
       "      <td>Chennai</td>\n",
       "      <td>2012</td>\n",
       "      <td>87000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>20.77 kmpl</td>\n",
       "      <td>1248 CC</td>\n",
       "      <td>88.76 bhp</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Audi A4 New 2.0 TDI Multitronic</td>\n",
       "      <td>Coimbatore</td>\n",
       "      <td>2013</td>\n",
       "      <td>40670</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Second</td>\n",
       "      <td>15.2 kmpl</td>\n",
       "      <td>1968 CC</td>\n",
       "      <td>140.8 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>17.74</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Name    Location  Year  Kilometers_Driven  \\\n",
       "0            Maruti Wagon R LXI CNG      Mumbai  2010              72000   \n",
       "1  Hyundai Creta 1.6 CRDi SX Option        Pune  2015              41000   \n",
       "2                      Honda Jazz V     Chennai  2011              46000   \n",
       "3                 Maruti Ertiga VDI     Chennai  2012              87000   \n",
       "4   Audi A4 New 2.0 TDI Multitronic  Coimbatore  2013              40670   \n",
       "\n",
       "  Fuel_Type Transmission Owner_Type     Mileage   Engine      Power  Seats  \\\n",
       "0       CNG       Manual      First  26.6 km/kg   998 CC  58.16 bhp    5.0   \n",
       "1    Diesel       Manual      First  19.67 kmpl  1582 CC  126.2 bhp    5.0   \n",
       "2    Petrol       Manual      First   18.2 kmpl  1199 CC   88.7 bhp    5.0   \n",
       "3    Diesel       Manual      First  20.77 kmpl  1248 CC  88.76 bhp    7.0   \n",
       "4    Diesel    Automatic     Second   15.2 kmpl  1968 CC  140.8 bhp    5.0   \n",
       "\n",
       "   New_Price  Price  \n",
       "0        NaN   1.75  \n",
       "1        NaN  12.50  \n",
       "2  8.61 Lakh   4.50  \n",
       "3        NaN   6.00  \n",
       "4        NaN  17.74  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Name                    0\n",
       "Location                0\n",
       "Year                    0\n",
       "Kilometers_Driven       0\n",
       "Fuel_Type               0\n",
       "Transmission            0\n",
       "Owner_Type              0\n",
       "Mileage                 2\n",
       "Engine                 36\n",
       "Power                  36\n",
       "Seats                  42\n",
       "New_Price            5195\n",
       "Price                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data cleaning\n",
    "df = df.drop(['New_Price'],axis=1)\n",
    "mean = np.floor(df[\"Seats\"].mean())\n",
    "df = df.fillna({\"Seats\":mean})\n",
    "df = df.dropna(how='any')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Name                 0\n",
       "Location             0\n",
       "Year                 0\n",
       "Kilometers_Driven    0\n",
       "Fuel_Type            0\n",
       "Transmission         0\n",
       "Owner_Type           0\n",
       "Mileage              0\n",
       "Engine               0\n",
       "Power                0\n",
       "Seats                0\n",
       "Price                0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dff = df\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# after removing some rows there is some duplicate data \n",
    "# we are removing that\n",
    "df = df.reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "# converting string data to float\n",
    "for i in range(df.shape[0]):\n",
    "    df.at[i, 'Company'] = df['Name'][i].split()[0]\n",
    "    df.at[i, 'Mileage(km/kg)'] = df['Mileage'][i].split()[0]\n",
    "    df.at[i, 'Engine(CC)'] = df['Engine'][i].split()[0]\n",
    "    df.at[i, 'Power(bhp)'] = df['Power'][i].split()[0]\n",
    "\n",
    "# converting to float :\n",
    "df['Mileage(km/kg)'] = df['Mileage(km/kg)'].astype(float)\n",
    "df['Engine(CC)'] = df['Engine(CC)'].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "107\n",
      "[76, 79, 89, 120, 143, 225, 243, 260, 305, 306, 384, 422, 426, 441, 470, 573, 629, 645, 646, 736, 745, 825, 911, 922, 930, 1064, 1139, 1149, 1267, 1314, 1339, 1381, 1412, 1547, 1570, 1641, 1664, 1849, 1991, 2045, 2120, 2154, 2252, 2256, 2294, 2330, 2356, 2380, 2428, 2437, 2484, 2488, 2514, 2564, 2582, 2619, 2624, 2871, 3013, 3041, 3084, 3169, 3227, 3269, 3417, 3494, 3509, 3565, 3604, 3614, 3621, 3645, 3709, 3776, 3857, 3873, 3905, 3974, 4051, 4054, 4323, 4326, 4598, 4677, 4681, 4711, 4797, 4853, 4867, 4919, 5029, 5083, 5191, 5388, 5400, 5420, 5491, 5495, 5609, 5717, 5721, 5823, 5835, 5855, 5887, 5905, 5947]\n"
     ]
    }
   ],
   "source": [
    "# counting and locating the positions of power(bhp) which have null values.\n",
    "count = 0\n",
    "position = []\n",
    "for i in range(0,df.shape[0]):\n",
    "    if (df['Power(bhp)'][i] == 'null'):\n",
    "        count = count +1\n",
    "        position.append(i)\n",
    "print(count)\n",
    "print(position)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df = df.drop(df.index[position])\n",
    "df = df.reset_index(drop=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Location</th>\n",
       "      <th>Year</th>\n",
       "      <th>Kilometers_Driven</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner_Type</th>\n",
       "      <th>Mileage</th>\n",
       "      <th>Engine</th>\n",
       "      <th>Power</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Price</th>\n",
       "      <th>Company</th>\n",
       "      <th>Mileage(km/kg)</th>\n",
       "      <th>Engine(CC)</th>\n",
       "      <th>Power(bhp)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Maruti Wagon R LXI CNG</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>2010</td>\n",
       "      <td>72000</td>\n",
       "      <td>CNG</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>26.6 km/kg</td>\n",
       "      <td>998 CC</td>\n",
       "      <td>58.16 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.75</td>\n",
       "      <td>Maruti</td>\n",
       "      <td>26.60</td>\n",
       "      <td>998.0</td>\n",
       "      <td>58.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Hyundai Creta 1.6 CRDi SX Option</td>\n",
       "      <td>Pune</td>\n",
       "      <td>2015</td>\n",
       "      <td>41000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>19.67 kmpl</td>\n",
       "      <td>1582 CC</td>\n",
       "      <td>126.2 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12.50</td>\n",
       "      <td>Hyundai</td>\n",
       "      <td>19.67</td>\n",
       "      <td>1582.0</td>\n",
       "      <td>126.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Honda Jazz V</td>\n",
       "      <td>Chennai</td>\n",
       "      <td>2011</td>\n",
       "      <td>46000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>18.2 kmpl</td>\n",
       "      <td>1199 CC</td>\n",
       "      <td>88.7 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.50</td>\n",
       "      <td>Honda</td>\n",
       "      <td>18.20</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>88.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Maruti Ertiga VDI</td>\n",
       "      <td>Chennai</td>\n",
       "      <td>2012</td>\n",
       "      <td>87000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>20.77 kmpl</td>\n",
       "      <td>1248 CC</td>\n",
       "      <td>88.76 bhp</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.00</td>\n",
       "      <td>Maruti</td>\n",
       "      <td>20.77</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>88.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Audi A4 New 2.0 TDI Multitronic</td>\n",
       "      <td>Coimbatore</td>\n",
       "      <td>2013</td>\n",
       "      <td>40670</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Second</td>\n",
       "      <td>15.2 kmpl</td>\n",
       "      <td>1968 CC</td>\n",
       "      <td>140.8 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>17.74</td>\n",
       "      <td>Audi</td>\n",
       "      <td>15.20</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>140.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5869</th>\n",
       "      <td>Maruti Swift VDI</td>\n",
       "      <td>Delhi</td>\n",
       "      <td>2014</td>\n",
       "      <td>27365</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>28.4 kmpl</td>\n",
       "      <td>1248 CC</td>\n",
       "      <td>74 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.75</td>\n",
       "      <td>Maruti</td>\n",
       "      <td>28.40</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5870</th>\n",
       "      <td>Hyundai Xcent 1.1 CRDi S</td>\n",
       "      <td>Jaipur</td>\n",
       "      <td>2015</td>\n",
       "      <td>100000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>24.4 kmpl</td>\n",
       "      <td>1120 CC</td>\n",
       "      <td>71 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>Hyundai</td>\n",
       "      <td>24.40</td>\n",
       "      <td>1120.0</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5871</th>\n",
       "      <td>Mahindra Xylo D4 BSIV</td>\n",
       "      <td>Jaipur</td>\n",
       "      <td>2012</td>\n",
       "      <td>55000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Second</td>\n",
       "      <td>14.0 kmpl</td>\n",
       "      <td>2498 CC</td>\n",
       "      <td>112 bhp</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2.90</td>\n",
       "      <td>Mahindra</td>\n",
       "      <td>14.00</td>\n",
       "      <td>2498.0</td>\n",
       "      <td>112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5872</th>\n",
       "      <td>Maruti Wagon R VXI</td>\n",
       "      <td>Kolkata</td>\n",
       "      <td>2013</td>\n",
       "      <td>46000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>18.9 kmpl</td>\n",
       "      <td>998 CC</td>\n",
       "      <td>67.1 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.65</td>\n",
       "      <td>Maruti</td>\n",
       "      <td>18.90</td>\n",
       "      <td>998.0</td>\n",
       "      <td>67.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5873</th>\n",
       "      <td>Chevrolet Beat Diesel</td>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>2011</td>\n",
       "      <td>47000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>25.44 kmpl</td>\n",
       "      <td>936 CC</td>\n",
       "      <td>57.6 bhp</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.50</td>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>25.44</td>\n",
       "      <td>936.0</td>\n",
       "      <td>57.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5874 rows Ã— 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  Name    Location  Year  Kilometers_Driven  \\\n",
       "0               Maruti Wagon R LXI CNG      Mumbai  2010              72000   \n",
       "1     Hyundai Creta 1.6 CRDi SX Option        Pune  2015              41000   \n",
       "2                         Honda Jazz V     Chennai  2011              46000   \n",
       "3                    Maruti Ertiga VDI     Chennai  2012              87000   \n",
       "4      Audi A4 New 2.0 TDI Multitronic  Coimbatore  2013              40670   \n",
       "...                                ...         ...   ...                ...   \n",
       "5869                  Maruti Swift VDI       Delhi  2014              27365   \n",
       "5870          Hyundai Xcent 1.1 CRDi S      Jaipur  2015             100000   \n",
       "5871             Mahindra Xylo D4 BSIV      Jaipur  2012              55000   \n",
       "5872                Maruti Wagon R VXI     Kolkata  2013              46000   \n",
       "5873             Chevrolet Beat Diesel   Hyderabad  2011              47000   \n",
       "\n",
       "     Fuel_Type Transmission Owner_Type     Mileage   Engine      Power  Seats  \\\n",
       "0          CNG       Manual      First  26.6 km/kg   998 CC  58.16 bhp    5.0   \n",
       "1       Diesel       Manual      First  19.67 kmpl  1582 CC  126.2 bhp    5.0   \n",
       "2       Petrol       Manual      First   18.2 kmpl  1199 CC   88.7 bhp    5.0   \n",
       "3       Diesel       Manual      First  20.77 kmpl  1248 CC  88.76 bhp    7.0   \n",
       "4       Diesel    Automatic     Second   15.2 kmpl  1968 CC  140.8 bhp    5.0   \n",
       "...        ...          ...        ...         ...      ...        ...    ...   \n",
       "5869    Diesel       Manual      First   28.4 kmpl  1248 CC     74 bhp    5.0   \n",
       "5870    Diesel       Manual      First   24.4 kmpl  1120 CC     71 bhp    5.0   \n",
       "5871    Diesel       Manual     Second   14.0 kmpl  2498 CC    112 bhp    8.0   \n",
       "5872    Petrol       Manual      First   18.9 kmpl   998 CC   67.1 bhp    5.0   \n",
       "5873    Diesel       Manual      First  25.44 kmpl   936 CC   57.6 bhp    5.0   \n",
       "\n",
       "      Price    Company  Mileage(km/kg)  Engine(CC) Power(bhp)  \n",
       "0      1.75     Maruti           26.60       998.0      58.16  \n",
       "1     12.50    Hyundai           19.67      1582.0      126.2  \n",
       "2      4.50      Honda           18.20      1199.0       88.7  \n",
       "3      6.00     Maruti           20.77      1248.0      88.76  \n",
       "4     17.74       Audi           15.20      1968.0      140.8  \n",
       "...     ...        ...             ...         ...        ...  \n",
       "5869   4.75     Maruti           28.40      1248.0         74  \n",
       "5870   4.00    Hyundai           24.40      1120.0         71  \n",
       "5871   2.90   Mahindra           14.00      2498.0        112  \n",
       "5872   2.65     Maruti           18.90       998.0       67.1  \n",
       "5873   2.50  Chevrolet           25.44       936.0       57.6  \n",
       "\n",
       "[5874 rows x 16 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Location</th>\n",
       "      <th>Year</th>\n",
       "      <th>Kilometers_Driven</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner_Type</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Price</th>\n",
       "      <th>Company</th>\n",
       "      <th>Mileage(km/kg)</th>\n",
       "      <th>Engine(CC)</th>\n",
       "      <th>Power(bhp)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mumbai</td>\n",
       "      <td>2010</td>\n",
       "      <td>72000</td>\n",
       "      <td>CNG</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.75</td>\n",
       "      <td>Maruti</td>\n",
       "      <td>26.60</td>\n",
       "      <td>998.0</td>\n",
       "      <td>58.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Pune</td>\n",
       "      <td>2015</td>\n",
       "      <td>41000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12.50</td>\n",
       "      <td>Hyundai</td>\n",
       "      <td>19.67</td>\n",
       "      <td>1582.0</td>\n",
       "      <td>126.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Chennai</td>\n",
       "      <td>2011</td>\n",
       "      <td>46000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.50</td>\n",
       "      <td>Honda</td>\n",
       "      <td>18.20</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>88.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chennai</td>\n",
       "      <td>2012</td>\n",
       "      <td>87000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.00</td>\n",
       "      <td>Maruti</td>\n",
       "      <td>20.77</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>88.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Coimbatore</td>\n",
       "      <td>2013</td>\n",
       "      <td>40670</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Second</td>\n",
       "      <td>5.0</td>\n",
       "      <td>17.74</td>\n",
       "      <td>Audi</td>\n",
       "      <td>15.20</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>140.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5869</th>\n",
       "      <td>Delhi</td>\n",
       "      <td>2014</td>\n",
       "      <td>27365</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.75</td>\n",
       "      <td>Maruti</td>\n",
       "      <td>28.40</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5870</th>\n",
       "      <td>Jaipur</td>\n",
       "      <td>2015</td>\n",
       "      <td>100000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>Hyundai</td>\n",
       "      <td>24.40</td>\n",
       "      <td>1120.0</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5871</th>\n",
       "      <td>Jaipur</td>\n",
       "      <td>2012</td>\n",
       "      <td>55000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Second</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2.90</td>\n",
       "      <td>Mahindra</td>\n",
       "      <td>14.00</td>\n",
       "      <td>2498.0</td>\n",
       "      <td>112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5872</th>\n",
       "      <td>Kolkata</td>\n",
       "      <td>2013</td>\n",
       "      <td>46000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.65</td>\n",
       "      <td>Maruti</td>\n",
       "      <td>18.90</td>\n",
       "      <td>998.0</td>\n",
       "      <td>67.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5873</th>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>2011</td>\n",
       "      <td>47000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.50</td>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>25.44</td>\n",
       "      <td>936.0</td>\n",
       "      <td>57.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5874 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Location  Year  Kilometers_Driven Fuel_Type Transmission Owner_Type  \\\n",
       "0         Mumbai  2010              72000       CNG       Manual      First   \n",
       "1           Pune  2015              41000    Diesel       Manual      First   \n",
       "2        Chennai  2011              46000    Petrol       Manual      First   \n",
       "3        Chennai  2012              87000    Diesel       Manual      First   \n",
       "4     Coimbatore  2013              40670    Diesel    Automatic     Second   \n",
       "...          ...   ...                ...       ...          ...        ...   \n",
       "5869       Delhi  2014              27365    Diesel       Manual      First   \n",
       "5870      Jaipur  2015             100000    Diesel       Manual      First   \n",
       "5871      Jaipur  2012              55000    Diesel       Manual     Second   \n",
       "5872     Kolkata  2013              46000    Petrol       Manual      First   \n",
       "5873   Hyderabad  2011              47000    Diesel       Manual      First   \n",
       "\n",
       "      Seats  Price    Company  Mileage(km/kg)  Engine(CC) Power(bhp)  \n",
       "0       5.0   1.75     Maruti           26.60       998.0      58.16  \n",
       "1       5.0  12.50    Hyundai           19.67      1582.0      126.2  \n",
       "2       5.0   4.50      Honda           18.20      1199.0       88.7  \n",
       "3       7.0   6.00     Maruti           20.77      1248.0      88.76  \n",
       "4       5.0  17.74       Audi           15.20      1968.0      140.8  \n",
       "...     ...    ...        ...             ...         ...        ...  \n",
       "5869    5.0   4.75     Maruti           28.40      1248.0         74  \n",
       "5870    5.0   4.00    Hyundai           24.40      1120.0         71  \n",
       "5871    8.0   2.90   Mahindra           14.00      2498.0        112  \n",
       "5872    5.0   2.65     Maruti           18.90       998.0       67.1  \n",
       "5873    5.0   2.50  Chevrolet           25.44       936.0       57.6  \n",
       "\n",
       "[5874 rows x 12 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.drop([\"Name\"],axis=1,inplace=True)\n",
    "df.drop([\"Mileage\"],axis=1,inplace=True)\n",
    "df.drop([\"Engine\"],axis=1,inplace=True)\n",
    "df.drop([\"Power\"],axis=1,inplace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5874"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# data training\n",
    "X = df.drop(['Price'],axis=1)\n",
    "y = df.Price\n",
    "len(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Location</th>\n",
       "      <th>Year</th>\n",
       "      <th>Kilometers_Driven</th>\n",
       "      <th>Fuel_Type</th>\n",
       "      <th>Transmission</th>\n",
       "      <th>Owner_Type</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Price</th>\n",
       "      <th>Company</th>\n",
       "      <th>Mileage(km/kg)</th>\n",
       "      <th>Engine(CC)</th>\n",
       "      <th>Power(bhp)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Mumbai</td>\n",
       "      <td>2010</td>\n",
       "      <td>72000</td>\n",
       "      <td>CNG</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1.75</td>\n",
       "      <td>Maruti</td>\n",
       "      <td>26.60</td>\n",
       "      <td>998.0</td>\n",
       "      <td>58.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Pune</td>\n",
       "      <td>2015</td>\n",
       "      <td>41000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12.50</td>\n",
       "      <td>Hyundai</td>\n",
       "      <td>19.67</td>\n",
       "      <td>1582.0</td>\n",
       "      <td>126.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Chennai</td>\n",
       "      <td>2011</td>\n",
       "      <td>46000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.50</td>\n",
       "      <td>Honda</td>\n",
       "      <td>18.20</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>88.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Chennai</td>\n",
       "      <td>2012</td>\n",
       "      <td>87000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>7.0</td>\n",
       "      <td>6.00</td>\n",
       "      <td>Maruti</td>\n",
       "      <td>20.77</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>88.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Coimbatore</td>\n",
       "      <td>2013</td>\n",
       "      <td>40670</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Automatic</td>\n",
       "      <td>Second</td>\n",
       "      <td>5.0</td>\n",
       "      <td>17.74</td>\n",
       "      <td>Audi</td>\n",
       "      <td>15.20</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>140.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5869</th>\n",
       "      <td>Delhi</td>\n",
       "      <td>2014</td>\n",
       "      <td>27365</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.75</td>\n",
       "      <td>Maruti</td>\n",
       "      <td>28.40</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5870</th>\n",
       "      <td>Jaipur</td>\n",
       "      <td>2015</td>\n",
       "      <td>100000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.00</td>\n",
       "      <td>Hyundai</td>\n",
       "      <td>24.40</td>\n",
       "      <td>1120.0</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5871</th>\n",
       "      <td>Jaipur</td>\n",
       "      <td>2012</td>\n",
       "      <td>55000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Second</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2.90</td>\n",
       "      <td>Mahindra</td>\n",
       "      <td>14.00</td>\n",
       "      <td>2498.0</td>\n",
       "      <td>112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5872</th>\n",
       "      <td>Kolkata</td>\n",
       "      <td>2013</td>\n",
       "      <td>46000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.65</td>\n",
       "      <td>Maruti</td>\n",
       "      <td>18.90</td>\n",
       "      <td>998.0</td>\n",
       "      <td>67.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5873</th>\n",
       "      <td>Hyderabad</td>\n",
       "      <td>2011</td>\n",
       "      <td>47000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First</td>\n",
       "      <td>5.0</td>\n",
       "      <td>2.50</td>\n",
       "      <td>Chevrolet</td>\n",
       "      <td>25.44</td>\n",
       "      <td>936.0</td>\n",
       "      <td>57.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5874 rows Ã— 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Location  Year  Kilometers_Driven Fuel_Type Transmission Owner_Type  \\\n",
       "0         Mumbai  2010              72000       CNG       Manual      First   \n",
       "1           Pune  2015              41000    Diesel       Manual      First   \n",
       "2        Chennai  2011              46000    Petrol       Manual      First   \n",
       "3        Chennai  2012              87000    Diesel       Manual      First   \n",
       "4     Coimbatore  2013              40670    Diesel    Automatic     Second   \n",
       "...          ...   ...                ...       ...          ...        ...   \n",
       "5869       Delhi  2014              27365    Diesel       Manual      First   \n",
       "5870      Jaipur  2015             100000    Diesel       Manual      First   \n",
       "5871      Jaipur  2012              55000    Diesel       Manual     Second   \n",
       "5872     Kolkata  2013              46000    Petrol       Manual      First   \n",
       "5873   Hyderabad  2011              47000    Diesel       Manual      First   \n",
       "\n",
       "      Seats  Price    Company  Mileage(km/kg)  Engine(CC) Power(bhp)  \n",
       "0       5.0   1.75     Maruti           26.60       998.0      58.16  \n",
       "1       5.0  12.50    Hyundai           19.67      1582.0      126.2  \n",
       "2       5.0   4.50      Honda           18.20      1199.0       88.7  \n",
       "3       7.0   6.00     Maruti           20.77      1248.0      88.76  \n",
       "4       5.0  17.74       Audi           15.20      1968.0      140.8  \n",
       "...     ...    ...        ...             ...         ...        ...  \n",
       "5869    5.0   4.75     Maruti           28.40      1248.0         74  \n",
       "5870    5.0   4.00    Hyundai           24.40      1120.0         71  \n",
       "5871    8.0   2.90   Mahindra           14.00      2498.0        112  \n",
       "5872    5.0   2.65     Maruti           18.90       998.0       67.1  \n",
       "5873    5.0   2.50  Chevrolet           25.44       936.0       57.6  \n",
       "\n",
       "[5874 rows x 12 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Kilometers_Driven</th>\n",
       "      <th>Seats</th>\n",
       "      <th>Mileage(km/kg)</th>\n",
       "      <th>Engine(CC)</th>\n",
       "      <th>Power(bhp)</th>\n",
       "      <th>Location_Ahmedabad</th>\n",
       "      <th>Location_Bangalore</th>\n",
       "      <th>Location_Chennai</th>\n",
       "      <th>Location_Coimbatore</th>\n",
       "      <th>Location_Delhi</th>\n",
       "      <th>...</th>\n",
       "      <th>Company_Mini</th>\n",
       "      <th>Company_Mitsubishi</th>\n",
       "      <th>Company_Nissan</th>\n",
       "      <th>Company_Porsche</th>\n",
       "      <th>Company_Renault</th>\n",
       "      <th>Company_Skoda</th>\n",
       "      <th>Company_Tata</th>\n",
       "      <th>Company_Toyota</th>\n",
       "      <th>Company_Volkswagen</th>\n",
       "      <th>Company_Volvo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>72000</td>\n",
       "      <td>5.0</td>\n",
       "      <td>26.60</td>\n",
       "      <td>998.0</td>\n",
       "      <td>58.16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>41000</td>\n",
       "      <td>5.0</td>\n",
       "      <td>19.67</td>\n",
       "      <td>1582.0</td>\n",
       "      <td>126.2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>46000</td>\n",
       "      <td>5.0</td>\n",
       "      <td>18.20</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>88.7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>87000</td>\n",
       "      <td>7.0</td>\n",
       "      <td>20.77</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>88.76</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>40670</td>\n",
       "      <td>5.0</td>\n",
       "      <td>15.20</td>\n",
       "      <td>1968.0</td>\n",
       "      <td>140.8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 78 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Kilometers_Driven  Seats  Mileage(km/kg)  Engine(CC) Power(bhp)  \\\n",
       "0              72000    5.0           26.60       998.0      58.16   \n",
       "1              41000    5.0           19.67      1582.0      126.2   \n",
       "2              46000    5.0           18.20      1199.0       88.7   \n",
       "3              87000    7.0           20.77      1248.0      88.76   \n",
       "4              40670    5.0           15.20      1968.0      140.8   \n",
       "\n",
       "   Location_Ahmedabad  Location_Bangalore  Location_Chennai  \\\n",
       "0                   0                   0                 0   \n",
       "1                   0                   0                 0   \n",
       "2                   0                   0                 1   \n",
       "3                   0                   0                 1   \n",
       "4                   0                   0                 0   \n",
       "\n",
       "   Location_Coimbatore  Location_Delhi  ...  Company_Mini  Company_Mitsubishi  \\\n",
       "0                    0               0  ...             0                   0   \n",
       "1                    0               0  ...             0                   0   \n",
       "2                    0               0  ...             0                   0   \n",
       "3                    0               0  ...             0                   0   \n",
       "4                    1               0  ...             0                   0   \n",
       "\n",
       "   Company_Nissan  Company_Porsche  Company_Renault  Company_Skoda  \\\n",
       "0               0                0                0              0   \n",
       "1               0                0                0              0   \n",
       "2               0                0                0              0   \n",
       "3               0                0                0              0   \n",
       "4               0                0                0              0   \n",
       "\n",
       "   Company_Tata  Company_Toyota  Company_Volkswagen  Company_Volvo  \n",
       "0             0               0                   0              0  \n",
       "1             0               0                   0              0  \n",
       "2             0               0                   0              0  \n",
       "3             0               0                   0              0  \n",
       "4             0               0                   0              0  \n",
       "\n",
       "[5 rows x 78 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = pd.get_dummies(X,columns=['Location','Year','Fuel_Type','Transmission','Owner_Type','Company'])\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Kilometers_Driven', 'Seats', 'Mileage(km/kg)', 'Engine(CC)',\n",
       "       'Power(bhp)', 'Location_Ahmedabad', 'Location_Bangalore',\n",
       "       'Location_Chennai', 'Location_Coimbatore', 'Location_Delhi',\n",
       "       'Location_Hyderabad', 'Location_Jaipur', 'Location_Kochi',\n",
       "       'Location_Kolkata', 'Location_Mumbai', 'Location_Pune', 'Year_1998',\n",
       "       'Year_1999', 'Year_2000', 'Year_2001', 'Year_2002', 'Year_2003',\n",
       "       'Year_2004', 'Year_2005', 'Year_2006', 'Year_2007', 'Year_2008',\n",
       "       'Year_2009', 'Year_2010', 'Year_2011', 'Year_2012', 'Year_2013',\n",
       "       'Year_2014', 'Year_2015', 'Year_2016', 'Year_2017', 'Year_2018',\n",
       "       'Year_2019', 'Fuel_Type_CNG', 'Fuel_Type_Diesel', 'Fuel_Type_LPG',\n",
       "       'Fuel_Type_Petrol', 'Transmission_Automatic', 'Transmission_Manual',\n",
       "       'Owner_Type_First', 'Owner_Type_Fourth & Above', 'Owner_Type_Second',\n",
       "       'Owner_Type_Third', 'Company_Ambassador', 'Company_Audi', 'Company_BMW',\n",
       "       'Company_Bentley', 'Company_Chevrolet', 'Company_Datsun',\n",
       "       'Company_Fiat', 'Company_Force', 'Company_Ford', 'Company_Honda',\n",
       "       'Company_Hyundai', 'Company_ISUZU', 'Company_Isuzu', 'Company_Jaguar',\n",
       "       'Company_Jeep', 'Company_Lamborghini', 'Company_Land',\n",
       "       'Company_Mahindra', 'Company_Maruti', 'Company_Mercedes-Benz',\n",
       "       'Company_Mini', 'Company_Mitsubishi', 'Company_Nissan',\n",
       "       'Company_Porsche', 'Company_Renault', 'Company_Skoda', 'Company_Tata',\n",
       "       'Company_Toyota', 'Company_Volkswagen', 'Company_Volvo'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5874, 78)\n",
      "(5874,)\n"
     ]
    }
   ],
   "source": [
    "# checking shape of    x and y\n",
    "print(X.shape)\n",
    "print(y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4699"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# training data by using sklearn train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)\n",
    "len(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Kilometers_Driven     70000\n",
       "Seats                     5\n",
       "Mileage(km/kg)           17\n",
       "Engine(CC)             1497\n",
       "Power(bhp)              118\n",
       "                      ...  \n",
       "Company_Skoda             0\n",
       "Company_Tata              0\n",
       "Company_Toyota            0\n",
       "Company_Volkswagen        0\n",
       "Company_Volvo             0\n",
       "Name: 603, Length: 78, dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Test_data =  X_test.loc[603]\n",
    "Test_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Max:  1.0\n",
      "Min:  0.0\n"
     ]
    }
   ],
   "source": [
    "# data scaling \n",
    "# everything is scaled b/w 0 to 1 . to prevent data leakage\n",
    "scaler = MinMaxScaler()\n",
    "\n",
    "# fit and transfrom\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)\n",
    "\n",
    "# everything has been scaled between 1 and 0\n",
    "print('Max: ',X_train.max())\n",
    "print('Min: ', X_train.min())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "\n",
    "# input layer\n",
    "model.add(Dense(19,activation='relu'))\n",
    "\n",
    "# hidden layers\n",
    "model.add(Dense(19,activation='relu'))\n",
    "model.add(Dense(19,activation='relu'))\n",
    "model.add(Dense(19,activation='relu'))\n",
    "\n",
    "# output layer\n",
    "model.add(Dense(1))\n",
    "\n",
    "model.compile(optimizer='adam',loss='mse')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/400\n",
      "37/37 [==============================] - 2s 16ms/step - loss: 203.5741 - val_loss: 243.8682\n",
      "Epoch 2/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 163.0756 - val_loss: 155.6528\n",
      "Epoch 3/400\n",
      "37/37 [==============================] - 0s 10ms/step - loss: 104.5485 - val_loss: 111.7692\n",
      "Epoch 4/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 71.3674 - val_loss: 73.3382\n",
      "Epoch 5/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 46.4809 - val_loss: 53.5190\n",
      "Epoch 6/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 37.5960 - val_loss: 47.9735\n",
      "Epoch 7/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 32.5854 - val_loss: 40.9791\n",
      "Epoch 8/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 28.3614 - val_loss: 36.3266\n",
      "Epoch 9/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 24.8157 - val_loss: 32.2938\n",
      "Epoch 10/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 21.6081 - val_loss: 28.1783\n",
      "Epoch 11/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 19.1721 - val_loss: 25.2993\n",
      "Epoch 12/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 16.7759 - val_loss: 23.4443\n",
      "Epoch 13/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 15.4161 - val_loss: 22.3465\n",
      "Epoch 14/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 14.4829 - val_loss: 20.8636\n",
      "Epoch 15/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 13.4176 - val_loss: 19.7968\n",
      "Epoch 16/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 13.0670 - val_loss: 19.9504\n",
      "Epoch 17/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 12.5593 - val_loss: 18.8528\n",
      "Epoch 18/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 12.0191 - val_loss: 18.9901\n",
      "Epoch 19/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 11.8858 - val_loss: 18.4819\n",
      "Epoch 20/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 11.5269 - val_loss: 18.2455\n",
      "Epoch 21/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 11.1416 - val_loss: 17.9113\n",
      "Epoch 22/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 11.0064 - val_loss: 18.1102\n",
      "Epoch 23/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 10.6222 - val_loss: 18.0653\n",
      "Epoch 24/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 10.4232 - val_loss: 17.7814\n",
      "Epoch 25/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 10.7019 - val_loss: 17.8601\n",
      "Epoch 26/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 10.2775 - val_loss: 17.8359\n",
      "Epoch 27/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 10.0494 - val_loss: 17.9363\n",
      "Epoch 28/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 9.7742 - val_loss: 17.6492\n",
      "Epoch 29/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 9.7997 - val_loss: 17.6498\n",
      "Epoch 30/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 9.6930 - val_loss: 17.7931\n",
      "Epoch 31/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 9.6283 - val_loss: 18.3425\n",
      "Epoch 32/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 9.8244 - val_loss: 18.5000\n",
      "Epoch 33/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 9.7743 - val_loss: 18.5868\n",
      "Epoch 34/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 9.5611 - val_loss: 18.0377\n",
      "Epoch 35/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 9.2421 - val_loss: 18.0371\n",
      "Epoch 36/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 9.2222 - val_loss: 18.0623\n",
      "Epoch 37/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 9.1653 - val_loss: 17.9311\n",
      "Epoch 38/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 9.0634 - val_loss: 18.0743\n",
      "Epoch 39/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 8.9716 - val_loss: 17.9119\n",
      "Epoch 40/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 8.8646 - val_loss: 18.5601\n",
      "Epoch 41/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 9.1593 - val_loss: 18.3020\n",
      "Epoch 42/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 8.9528 - val_loss: 18.1235\n",
      "Epoch 43/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 8.7892 - val_loss: 18.2577\n",
      "Epoch 44/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 9.0274 - val_loss: 18.9566\n",
      "Epoch 45/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 8.8612 - val_loss: 19.0084\n",
      "Epoch 46/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 8.9287 - val_loss: 18.9150\n",
      "Epoch 47/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 8.9303 - val_loss: 18.5281\n",
      "Epoch 48/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 8.8541 - val_loss: 18.9043\n",
      "Epoch 49/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 8.5173 - val_loss: 19.1806\n",
      "Epoch 50/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 8.3917 - val_loss: 18.8965\n",
      "Epoch 51/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 8.4291 - val_loss: 19.1653\n",
      "Epoch 52/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 8.3972 - val_loss: 19.0186\n",
      "Epoch 53/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 8.4858 - val_loss: 18.7582\n",
      "Epoch 54/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 8.2962 - val_loss: 18.9850\n",
      "Epoch 55/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 8.1799 - val_loss: 19.0061\n",
      "Epoch 56/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 8.9271 - val_loss: 19.2208\n",
      "Epoch 57/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 8.1053 - val_loss: 19.2720\n",
      "Epoch 58/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 8.0298 - val_loss: 19.6317\n",
      "Epoch 59/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 8.2194 - val_loss: 19.7543\n",
      "Epoch 60/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 8.2763 - val_loss: 20.0351\n",
      "Epoch 61/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 8.0062 - val_loss: 19.5781\n",
      "Epoch 62/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 7.9306 - val_loss: 20.2199\n",
      "Epoch 63/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 8.0144 - val_loss: 20.0089\n",
      "Epoch 64/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 7.8057 - val_loss: 20.1371\n",
      "Epoch 65/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 8.2180 - val_loss: 20.1516\n",
      "Epoch 66/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 7.9729 - val_loss: 20.8606\n",
      "Epoch 67/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 7.7245 - val_loss: 20.4833\n",
      "Epoch 68/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 7.6206 - val_loss: 20.2559\n",
      "Epoch 69/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 7.8721 - val_loss: 20.5307\n",
      "Epoch 70/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 7.6651 - val_loss: 20.7336\n",
      "Epoch 71/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 7.5873 - val_loss: 20.6884\n",
      "Epoch 72/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 7.5447 - val_loss: 20.5890\n",
      "Epoch 73/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 7.4954 - val_loss: 21.9572\n",
      "Epoch 74/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 7.7412 - val_loss: 20.5904\n",
      "Epoch 75/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 7.5894 - val_loss: 20.9006\n",
      "Epoch 76/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 7.3623 - val_loss: 21.4975\n",
      "Epoch 77/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 7.3204 - val_loss: 21.5475\n",
      "Epoch 78/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 7.4811 - val_loss: 20.9937\n",
      "Epoch 79/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 7.2900 - val_loss: 20.8992\n",
      "Epoch 80/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 7.3912 - val_loss: 21.8544\n",
      "Epoch 81/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 7.5758 - val_loss: 21.2878\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 82/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 7.1009 - val_loss: 21.3940\n",
      "Epoch 83/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 7.0897 - val_loss: 21.3797\n",
      "Epoch 84/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 7.0622 - val_loss: 21.5057\n",
      "Epoch 85/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 7.1300 - val_loss: 21.6574\n",
      "Epoch 86/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 7.0022 - val_loss: 21.5942\n",
      "Epoch 87/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 7.0134 - val_loss: 21.7255\n",
      "Epoch 88/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.8507 - val_loss: 22.6089\n",
      "Epoch 89/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 7.0595 - val_loss: 22.4767\n",
      "Epoch 90/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 7.1766 - val_loss: 22.6051\n",
      "Epoch 91/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 7.0993 - val_loss: 22.5654\n",
      "Epoch 92/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.9528 - val_loss: 22.1656\n",
      "Epoch 93/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.8018 - val_loss: 22.3189\n",
      "Epoch 94/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.7583 - val_loss: 22.6768\n",
      "Epoch 95/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.8161 - val_loss: 22.4204\n",
      "Epoch 96/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 7.1099 - val_loss: 23.1130\n",
      "Epoch 97/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.6552 - val_loss: 22.8342\n",
      "Epoch 98/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.6513 - val_loss: 22.8186\n",
      "Epoch 99/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.5478 - val_loss: 22.4516\n",
      "Epoch 100/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.6119 - val_loss: 23.1737\n",
      "Epoch 101/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.5810 - val_loss: 23.4324\n",
      "Epoch 102/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 6.4062 - val_loss: 24.4664\n",
      "Epoch 103/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 6.6288 - val_loss: 23.3060\n",
      "Epoch 104/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 6.3389 - val_loss: 24.0516\n",
      "Epoch 105/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.3781 - val_loss: 23.7840\n",
      "Epoch 106/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 6.2156 - val_loss: 23.9543\n",
      "Epoch 107/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 6.4209 - val_loss: 23.9481\n",
      "Epoch 108/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 6.5460 - val_loss: 23.8200\n",
      "Epoch 109/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.2446 - val_loss: 23.4977\n",
      "Epoch 110/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 6.2672 - val_loss: 24.2686\n",
      "Epoch 111/400\n",
      "37/37 [==============================] - ETA: 0s - loss: 6.250 - 0s 7ms/step - loss: 6.3087 - val_loss: 24.2255\n",
      "Epoch 112/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 6.1894 - val_loss: 26.5777\n",
      "Epoch 113/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.3833 - val_loss: 25.0402\n",
      "Epoch 114/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 6.0811 - val_loss: 24.0057\n",
      "Epoch 115/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 5.9952 - val_loss: 24.8698\n",
      "Epoch 116/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.9574 - val_loss: 24.1399\n",
      "Epoch 117/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.1957 - val_loss: 24.6724\n",
      "Epoch 118/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 6.3487 - val_loss: 25.3278\n",
      "Epoch 119/400\n",
      "37/37 [==============================] - ETA: 0s - loss: 6.126 - 0s 8ms/step - loss: 5.9776 - val_loss: 24.5890\n",
      "Epoch 120/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.9385 - val_loss: 24.3866\n",
      "Epoch 121/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 6.3268 - val_loss: 25.4603\n",
      "Epoch 122/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 5.9995 - val_loss: 24.1496\n",
      "Epoch 123/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.8114 - val_loss: 24.9547\n",
      "Epoch 124/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.7718 - val_loss: 24.5499\n",
      "Epoch 125/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.8009 - val_loss: 25.0663\n",
      "Epoch 126/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.7049 - val_loss: 24.3611\n",
      "Epoch 127/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.7060 - val_loss: 25.6320\n",
      "Epoch 128/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 5.6603 - val_loss: 24.6299\n",
      "Epoch 129/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 5.6761 - val_loss: 24.8273\n",
      "Epoch 130/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.7346 - val_loss: 25.0562\n",
      "Epoch 131/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.5329 - val_loss: 25.3062\n",
      "Epoch 132/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.5820 - val_loss: 25.9182\n",
      "Epoch 133/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.8212 - val_loss: 25.0303\n",
      "Epoch 134/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.6270 - val_loss: 25.5373\n",
      "Epoch 135/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.8330 - val_loss: 25.3501\n",
      "Epoch 136/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.5360 - val_loss: 26.2104\n",
      "Epoch 137/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.6088 - val_loss: 26.5064\n",
      "Epoch 138/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.5830 - val_loss: 24.9831\n",
      "Epoch 139/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.5065 - val_loss: 26.0429\n",
      "Epoch 140/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.4281 - val_loss: 26.2753\n",
      "Epoch 141/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.6727 - val_loss: 25.2662\n",
      "Epoch 142/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 5.4548 - val_loss: 25.6238\n",
      "Epoch 143/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.3669 - val_loss: 25.4271\n",
      "Epoch 144/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 5.3947 - val_loss: 25.6128\n",
      "Epoch 145/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 5.3556 - val_loss: 26.2476\n",
      "Epoch 146/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.7252 - val_loss: 25.4682\n",
      "Epoch 147/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.1904 - val_loss: 26.2478\n",
      "Epoch 148/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 5.1198 - val_loss: 26.1351\n",
      "Epoch 149/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.2400 - val_loss: 26.2932\n",
      "Epoch 150/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.5578 - val_loss: 25.7426\n",
      "Epoch 151/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.1046 - val_loss: 25.9722\n",
      "Epoch 152/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.1610 - val_loss: 26.2000\n",
      "Epoch 153/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.0884 - val_loss: 27.1232\n",
      "Epoch 154/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.0633 - val_loss: 26.1101\n",
      "Epoch 155/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.1911 - val_loss: 26.5375\n",
      "Epoch 156/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 5.0304 - val_loss: 26.0489\n",
      "Epoch 157/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.2404 - val_loss: 26.0668\n",
      "Epoch 158/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.3858 - val_loss: 26.8780\n",
      "Epoch 159/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.1009 - val_loss: 25.8005\n",
      "Epoch 160/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 5.0457 - val_loss: 28.1104\n",
      "Epoch 161/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.0306 - val_loss: 27.1478\n",
      "Epoch 162/400\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37/37 [==============================] - 0s 8ms/step - loss: 4.9002 - val_loss: 26.2931\n",
      "Epoch 163/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 5.0523 - val_loss: 26.5482\n",
      "Epoch 164/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 5.1867 - val_loss: 26.9482\n",
      "Epoch 165/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.9114 - val_loss: 27.3327\n",
      "Epoch 166/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 4.8013 - val_loss: 26.9264\n",
      "Epoch 167/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 4.9321 - val_loss: 25.9535\n",
      "Epoch 168/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.8162 - val_loss: 26.3798\n",
      "Epoch 169/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.9437 - val_loss: 27.4950\n",
      "Epoch 170/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.9195 - val_loss: 27.1390\n",
      "Epoch 171/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.8223 - val_loss: 25.9056\n",
      "Epoch 172/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.7377 - val_loss: 26.8989\n",
      "Epoch 173/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.7892 - val_loss: 26.1691\n",
      "Epoch 174/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.8218 - val_loss: 26.2247\n",
      "Epoch 175/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.7549 - val_loss: 26.8101\n",
      "Epoch 176/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.7431 - val_loss: 25.9713\n",
      "Epoch 177/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 4.6478 - val_loss: 25.8635\n",
      "Epoch 178/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.8123 - val_loss: 26.1844\n",
      "Epoch 179/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.7298 - val_loss: 27.6663\n",
      "Epoch 180/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.6561 - val_loss: 26.5648\n",
      "Epoch 181/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 4.6067 - val_loss: 27.9319\n",
      "Epoch 182/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 4.6505 - val_loss: 26.6941\n",
      "Epoch 183/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.6468 - val_loss: 26.9721\n",
      "Epoch 184/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.6516 - val_loss: 25.9072\n",
      "Epoch 185/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.6503 - val_loss: 27.8188\n",
      "Epoch 186/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.6639 - val_loss: 28.2350\n",
      "Epoch 187/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.9005 - val_loss: 26.3412\n",
      "Epoch 188/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.7821 - val_loss: 27.8550\n",
      "Epoch 189/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.5820 - val_loss: 28.4177\n",
      "Epoch 190/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.5925 - val_loss: 26.1652\n",
      "Epoch 191/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.7140 - val_loss: 28.5453\n",
      "Epoch 192/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.6756 - val_loss: 28.0895\n",
      "Epoch 193/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.7106 - val_loss: 26.5797\n",
      "Epoch 194/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.5481 - val_loss: 27.8484\n",
      "Epoch 195/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 4.5011 - val_loss: 27.1572\n",
      "Epoch 196/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 4.4655 - val_loss: 27.5325\n",
      "Epoch 197/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.4511 - val_loss: 28.1477\n",
      "Epoch 198/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.5662 - val_loss: 26.7324\n",
      "Epoch 199/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.4825 - val_loss: 27.9967\n",
      "Epoch 200/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.4417 - val_loss: 27.1638\n",
      "Epoch 201/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.3646 - val_loss: 28.5476\n",
      "Epoch 202/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.4588 - val_loss: 26.3256\n",
      "Epoch 203/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 4.4583 - val_loss: 27.7906\n",
      "Epoch 204/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.8247 - val_loss: 28.2194\n",
      "Epoch 205/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.3909 - val_loss: 28.7507\n",
      "Epoch 206/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.5157 - val_loss: 27.0388\n",
      "Epoch 207/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.4147 - val_loss: 28.2573\n",
      "Epoch 208/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.3404 - val_loss: 26.6360\n",
      "Epoch 209/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.4395 - val_loss: 27.0447\n",
      "Epoch 210/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 4.4528 - val_loss: 27.6002\n",
      "Epoch 211/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 4.3156 - val_loss: 29.4357\n",
      "Epoch 212/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.3019 - val_loss: 28.4935\n",
      "Epoch 213/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.4133 - val_loss: 27.8054\n",
      "Epoch 214/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.2947 - val_loss: 26.8829\n",
      "Epoch 215/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.2796 - val_loss: 27.4708\n",
      "Epoch 216/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.1573 - val_loss: 26.9115\n",
      "Epoch 217/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 4.3512 - val_loss: 27.5779\n",
      "Epoch 218/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.2106 - val_loss: 28.1407\n",
      "Epoch 219/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.6384 - val_loss: 27.3553\n",
      "Epoch 220/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.5559 - val_loss: 26.0104\n",
      "Epoch 221/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.2443 - val_loss: 27.9162\n",
      "Epoch 222/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.2514 - val_loss: 28.3148\n",
      "Epoch 223/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 4.4910 - val_loss: 26.6753\n",
      "Epoch 224/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.2999 - val_loss: 27.9855\n",
      "Epoch 225/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.1207 - val_loss: 28.1523\n",
      "Epoch 226/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.2213 - val_loss: 27.8507\n",
      "Epoch 227/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.2470 - val_loss: 28.4875\n",
      "Epoch 228/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.2224 - val_loss: 28.2682\n",
      "Epoch 229/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.1454 - val_loss: 27.5738\n",
      "Epoch 230/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 4.1361 - val_loss: 28.1429\n",
      "Epoch 231/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.0489 - val_loss: 26.1786\n",
      "Epoch 232/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.1467 - val_loss: 30.6771\n",
      "Epoch 233/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.1062 - val_loss: 27.0195\n",
      "Epoch 234/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.1671 - val_loss: 28.9805\n",
      "Epoch 235/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.0687 - val_loss: 27.6672\n",
      "Epoch 236/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 4.0250 - val_loss: 26.7971\n",
      "Epoch 237/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.0453 - val_loss: 28.0943\n",
      "Epoch 238/400\n",
      "37/37 [==============================] - 0s 10ms/step - loss: 4.0206 - val_loss: 28.1854\n",
      "Epoch 239/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 4.0196 - val_loss: 28.0982\n",
      "Epoch 240/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.9940 - val_loss: 27.2782\n",
      "Epoch 241/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.0415 - val_loss: 28.3261\n",
      "Epoch 242/400\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37/37 [==============================] - 0s 7ms/step - loss: 4.0452 - val_loss: 28.8390\n",
      "Epoch 243/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.0499 - val_loss: 27.0270\n",
      "Epoch 244/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.0232 - val_loss: 28.9632\n",
      "Epoch 245/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.9183 - val_loss: 29.6494\n",
      "Epoch 246/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.0688 - val_loss: 28.0264\n",
      "Epoch 247/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 4.0315 - val_loss: 28.4729\n",
      "Epoch 248/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 4.0797 - val_loss: 29.0114\n",
      "Epoch 249/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.8929 - val_loss: 28.8958\n",
      "Epoch 250/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.9391 - val_loss: 28.1465\n",
      "Epoch 251/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.9103 - val_loss: 28.7152\n",
      "Epoch 252/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.9031 - val_loss: 28.5524\n",
      "Epoch 253/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.8847 - val_loss: 28.4685\n",
      "Epoch 254/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 3.9293 - val_loss: 28.3827\n",
      "Epoch 255/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.8797 - val_loss: 27.5007\n",
      "Epoch 256/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 3.8325 - val_loss: 28.0762\n",
      "Epoch 257/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.8283 - val_loss: 28.8684\n",
      "Epoch 258/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.8097 - val_loss: 29.3748\n",
      "Epoch 259/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.9478 - val_loss: 27.2126\n",
      "Epoch 260/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.8897 - val_loss: 28.6947\n",
      "Epoch 261/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.7924 - val_loss: 28.6238\n",
      "Epoch 262/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.9117 - val_loss: 29.3540\n",
      "Epoch 263/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.8090 - val_loss: 28.8721\n",
      "Epoch 264/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.8385 - val_loss: 29.3184\n",
      "Epoch 265/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.9718 - val_loss: 27.9644\n",
      "Epoch 266/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.9065 - val_loss: 29.6559\n",
      "Epoch 267/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.8841 - val_loss: 29.0946\n",
      "Epoch 268/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.7063 - val_loss: 28.6154\n",
      "Epoch 269/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.7296 - val_loss: 28.8537\n",
      "Epoch 270/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.7542 - val_loss: 28.1142\n",
      "Epoch 271/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.7221 - val_loss: 29.0906\n",
      "Epoch 272/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.8115 - val_loss: 30.9411\n",
      "Epoch 273/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.8870 - val_loss: 29.4656\n",
      "Epoch 274/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.7415 - val_loss: 27.9714\n",
      "Epoch 275/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.7370 - val_loss: 27.9537\n",
      "Epoch 276/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.7572 - val_loss: 30.1295\n",
      "Epoch 277/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.8979 - val_loss: 30.3175\n",
      "Epoch 278/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.8645 - val_loss: 31.0414\n",
      "Epoch 279/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 4.0645 - val_loss: 27.7506\n",
      "Epoch 280/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.8380 - val_loss: 29.6781\n",
      "Epoch 281/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.8094 - val_loss: 29.4637\n",
      "Epoch 282/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.7622 - val_loss: 29.4870\n",
      "Epoch 283/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.6594 - val_loss: 29.5672\n",
      "Epoch 284/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.6682 - val_loss: 29.3115\n",
      "Epoch 285/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.6803 - val_loss: 29.3547\n",
      "Epoch 286/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.6533 - val_loss: 28.2354\n",
      "Epoch 287/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.6557 - val_loss: 29.8815\n",
      "Epoch 288/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.6544 - val_loss: 28.7346\n",
      "Epoch 289/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.6268 - val_loss: 27.9126\n",
      "Epoch 290/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.5648 - val_loss: 27.7302\n",
      "Epoch 291/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.5821 - val_loss: 29.4757\n",
      "Epoch 292/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.6909 - val_loss: 30.6137\n",
      "Epoch 293/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.7340 - val_loss: 29.9919\n",
      "Epoch 294/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.6073 - val_loss: 28.5256\n",
      "Epoch 295/400\n",
      "37/37 [==============================] - 0s 10ms/step - loss: 3.4852 - val_loss: 28.4752\n",
      "Epoch 296/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.5037 - val_loss: 27.7126\n",
      "Epoch 297/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.7606 - val_loss: 29.2409\n",
      "Epoch 298/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.6810 - val_loss: 27.0180\n",
      "Epoch 299/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.7016 - val_loss: 28.3525\n",
      "Epoch 300/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.5900 - val_loss: 27.3906\n",
      "Epoch 301/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.5670 - val_loss: 29.2091\n",
      "Epoch 302/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.5506 - val_loss: 27.4773\n",
      "Epoch 303/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4864 - val_loss: 29.0027\n",
      "Epoch 304/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4815 - val_loss: 28.2034\n",
      "Epoch 305/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4593 - val_loss: 28.4001\n",
      "Epoch 306/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.5914 - val_loss: 27.6318\n",
      "Epoch 307/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.5313 - val_loss: 27.9208\n",
      "Epoch 308/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.6088 - val_loss: 27.7281\n",
      "Epoch 309/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.4518 - val_loss: 28.4417\n",
      "Epoch 310/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4835 - val_loss: 27.9390\n",
      "Epoch 311/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.5053 - val_loss: 29.9173\n",
      "Epoch 312/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4780 - val_loss: 27.7707\n",
      "Epoch 313/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4498 - val_loss: 28.2575\n",
      "Epoch 314/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4177 - val_loss: 29.0702\n",
      "Epoch 315/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4806 - val_loss: 28.4647\n",
      "Epoch 316/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4531 - val_loss: 27.7850\n",
      "Epoch 317/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 3.4877 - val_loss: 27.5677\n",
      "Epoch 318/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4722 - val_loss: 26.8124\n",
      "Epoch 319/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.6523 - val_loss: 28.5935\n",
      "Epoch 320/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.5405 - val_loss: 27.9689\n",
      "Epoch 321/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4559 - val_loss: 28.0772\n",
      "Epoch 322/400\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37/37 [==============================] - 0s 6ms/step - loss: 3.3573 - val_loss: 28.7797\n",
      "Epoch 323/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4049 - val_loss: 28.4022\n",
      "Epoch 324/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.2890 - val_loss: 26.9593\n",
      "Epoch 325/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.3262 - val_loss: 28.9275\n",
      "Epoch 326/400\n",
      "37/37 [==============================] - 0s 10ms/step - loss: 3.3718 - val_loss: 28.4624\n",
      "Epoch 327/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.3944 - val_loss: 28.1566\n",
      "Epoch 328/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 3.3392 - val_loss: 26.9286\n",
      "Epoch 329/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4627 - val_loss: 27.9889\n",
      "Epoch 330/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.3915 - val_loss: 29.7563\n",
      "Epoch 331/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.4293 - val_loss: 27.7922\n",
      "Epoch 332/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.4416 - val_loss: 28.3788\n",
      "Epoch 333/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4156 - val_loss: 28.8690\n",
      "Epoch 334/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.4508 - val_loss: 27.4261\n",
      "Epoch 335/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4553 - val_loss: 28.5137\n",
      "Epoch 336/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.4526 - val_loss: 27.5092\n",
      "Epoch 337/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.4612 - val_loss: 27.5275\n",
      "Epoch 338/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.3861 - val_loss: 27.4525\n",
      "Epoch 339/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 3.2417 - val_loss: 27.3101\n",
      "Epoch 340/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.3178 - val_loss: 27.9210\n",
      "Epoch 341/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.2604 - val_loss: 27.7873\n",
      "Epoch 342/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.3354 - val_loss: 26.6733\n",
      "Epoch 343/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.2873 - val_loss: 27.9644\n",
      "Epoch 344/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.5436 - val_loss: 28.0277\n",
      "Epoch 345/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.5788 - val_loss: 27.9379\n",
      "Epoch 346/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.3252 - val_loss: 28.3676\n",
      "Epoch 347/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 3.3614 - val_loss: 27.5355\n",
      "Epoch 348/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.2873 - val_loss: 28.0609\n",
      "Epoch 349/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.3151 - val_loss: 27.8046\n",
      "Epoch 350/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.4652 - val_loss: 27.1860\n",
      "Epoch 351/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.3268 - val_loss: 26.8859\n",
      "Epoch 352/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.3713 - val_loss: 26.3052\n",
      "Epoch 353/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.2983 - val_loss: 28.3068\n",
      "Epoch 354/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.1944 - val_loss: 25.9432\n",
      "Epoch 355/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 3.5742 - val_loss: 29.4820\n",
      "Epoch 356/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4418 - val_loss: 27.0499\n",
      "Epoch 357/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.1893 - val_loss: 25.9835\n",
      "Epoch 358/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.2535 - val_loss: 27.5316\n",
      "Epoch 359/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.1767 - val_loss: 26.8673\n",
      "Epoch 360/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.1800 - val_loss: 27.5957\n",
      "Epoch 361/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.3962 - val_loss: 26.9347\n",
      "Epoch 362/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.3729 - val_loss: 26.6301\n",
      "Epoch 363/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.2501 - val_loss: 26.5648\n",
      "Epoch 364/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.2627 - val_loss: 27.2679\n",
      "Epoch 365/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.2098 - val_loss: 27.1862\n",
      "Epoch 366/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.0998 - val_loss: 26.1944\n",
      "Epoch 367/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.1116 - val_loss: 27.4135\n",
      "Epoch 368/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.2621 - val_loss: 26.7604\n",
      "Epoch 369/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.1851 - val_loss: 27.6209\n",
      "Epoch 370/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4383 - val_loss: 26.5298\n",
      "Epoch 371/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4037 - val_loss: 26.2857\n",
      "Epoch 372/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.4495 - val_loss: 26.4587\n",
      "Epoch 373/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.3456 - val_loss: 27.4854\n",
      "Epoch 374/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.2909 - val_loss: 29.6153\n",
      "Epoch 375/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.3296 - val_loss: 26.8666\n",
      "Epoch 376/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.2624 - val_loss: 27.1622\n",
      "Epoch 377/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.2915 - val_loss: 27.7236\n",
      "Epoch 378/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.3079 - val_loss: 26.4053\n",
      "Epoch 379/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.1015 - val_loss: 27.7547\n",
      "Epoch 380/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.1227 - val_loss: 26.4431\n",
      "Epoch 381/400\n",
      "37/37 [==============================] - 0s 6ms/step - loss: 3.0700 - val_loss: 26.7074\n",
      "Epoch 382/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.0739 - val_loss: 27.0701\n",
      "Epoch 383/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.0505 - val_loss: 28.0576\n",
      "Epoch 384/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.1642 - val_loss: 26.2894\n",
      "Epoch 385/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.2107 - val_loss: 27.0208\n",
      "Epoch 386/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.2212 - val_loss: 27.2816\n",
      "Epoch 387/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.0299 - val_loss: 26.4557\n",
      "Epoch 388/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.2820 - val_loss: 26.6768\n",
      "Epoch 389/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.1662 - val_loss: 27.0565\n",
      "Epoch 390/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.0068 - val_loss: 26.4194\n",
      "Epoch 391/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 2.9762 - val_loss: 29.2418\n",
      "Epoch 392/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.0777 - val_loss: 26.3115\n",
      "Epoch 393/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 3.0768 - val_loss: 27.1162\n",
      "Epoch 394/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 2.9733 - val_loss: 27.4264\n",
      "Epoch 395/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.0056 - val_loss: 27.5532\n",
      "Epoch 396/400\n",
      "37/37 [==============================] - 0s 9ms/step - loss: 3.0056 - val_loss: 28.3490\n",
      "Epoch 397/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.0443 - val_loss: 27.0505\n",
      "Epoch 398/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.0309 - val_loss: 27.1032\n",
      "Epoch 399/400\n",
      "37/37 [==============================] - 0s 8ms/step - loss: 3.1413 - val_loss: 26.7965\n",
      "Epoch 400/400\n",
      "37/37 [==============================] - 0s 7ms/step - loss: 2.9264 - val_loss: 26.5005\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x18c69c96a60>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(x=X_train,y=y_train.values,\n",
    "          validation_data=(X_test,y_test.values),\n",
    "          batch_size=128,epochs=400)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAE:  2.085945937627427\n",
      "MSE:  26.500462546128322\n",
      "RMSE:  5.147859996748972\n",
      "Variance Regression Score:  0.8233287479860092\n",
      "\n",
      "\n",
      "Descriptive Statistics:\n",
      " count    5874.000000\n",
      "mean        9.601551\n",
      "std        11.248283\n",
      "min         0.440000\n",
      "25%         3.512500\n",
      "50%         5.750000\n",
      "75%        10.000000\n",
      "max       160.000000\n",
      "Name: Price, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# predictions on the test set\n",
    "predictions = model.predict(X_test)\n",
    "\n",
    "print('MAE: ',mean_absolute_error(y_test,predictions))\n",
    "print('MSE: ',mean_squared_error(y_test,predictions))\n",
    "print('RMSE: ',np.sqrt(mean_squared_error(y_test,predictions)))\n",
    "print('Variance Regression Score: ',explained_variance_score(y_test,predictions))\n",
    "\n",
    "print('\\n\\nDescriptive Statistics:\\n',df['Price'].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5981"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dff.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Features of car :\n",
      "[[0.01074321 0.375      0.50685748 0.18048377 0.15937619 0.\n",
      "  0.         0.         0.         0.         0.         0.\n",
      "  0.         0.         1.         0.         0.         0.\n",
      "  0.         0.         0.         0.         0.         0.\n",
      "  0.         0.         0.         1.         0.         0.\n",
      "  0.         0.         0.         0.         0.         0.\n",
      "  0.         0.         0.         0.         0.         1.\n",
      "  0.         1.         1.         0.         0.         0.\n",
      "  0.         0.         0.         0.         0.         0.\n",
      "  0.         0.         0.         1.         0.         0.\n",
      "  0.         0.         0.         0.         0.         0.\n",
      "  0.         0.         0.         0.         0.         0.\n",
      "  0.         0.         0.         0.         0.         0.        ]]\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'numpy.ndarray' object has no attribute 'values'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-33-9aed4c3f3670>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Features of car :\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mTest_data\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mTest_data\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mscaler\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mTest_data\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m78\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'\\nPrediction Price:'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mmodel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mTest_data\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'numpy.ndarray' object has no attribute 'values'"
     ]
    }
   ],
   "source": [
    "print(\"Features of car :\")\n",
    "print(Test_data)\n",
    "Test_data = scaler.transform(Test_data.values.reshape(-1, 78))\n",
    "print('\\nPrediction Price:',model.predict(Test_data)[0,0])\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
